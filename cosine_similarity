{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6524,"status":"ok","timestamp":1649338637792,"user":{"displayName":"张震元","userId":"03679820376656707274"},"user_tz":-480},"id":"S9RomKiBWMLm","outputId":"6b64812c-6f1b-473f-b9d1-f173c3980d93"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting ftfy\n","  Downloading ftfy-6.1.1-py3-none-any.whl (53 kB)\n","\u001b[?25l\r\u001b[K     |██████▏                         | 10 kB 22.0 MB/s eta 0:00:01\r\u001b[K     |████████████▍                   | 20 kB 24.5 MB/s eta 0:00:01\r\u001b[K     |██████████████████▌             | 30 kB 27.9 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 40 kB 30.6 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 51 kB 31.5 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 53 kB 1.7 MB/s \n","\u001b[?25hRequirement already satisfied: wcwidth>=0.2.5 in /usr/local/lib/python3.7/dist-packages (from ftfy) (0.2.5)\n","Installing collected packages: ftfy\n","Successfully installed ftfy-6.1.1\n"]}],"source":["!pip install ftfy"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3803,"status":"ok","timestamp":1649338641590,"user":{"displayName":"张震元","userId":"03679820376656707274"},"user_tz":-480},"id":"rmv1qgKprMxR","outputId":"35405eae-c7cc-4e18-f0c4-29f97c87e7db"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting faiss-cpu\n","  Downloading faiss_cpu-1.7.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (8.6 MB)\n","\u001b[K     |████████████████████████████████| 8.6 MB 8.5 MB/s \n","\u001b[?25hInstalling collected packages: faiss-cpu\n","Successfully installed faiss-cpu-1.7.2\n"]}],"source":["!pip install faiss-cpu"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m1rtAQ8lVomK","executionInfo":{"status":"ok","timestamp":1649338670273,"user_tz":-480,"elapsed":28688,"user":{"displayName":"张震元","userId":"03679820376656707274"}},"outputId":"e7d0ccd4-f401-46ea-e147-e9febb3e422b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["\n","import sys\n","from google.colab import drive\n","drive.mount('/content/drive') # 授权 Google Drive\n","sys.path.append('/content/drive/MyDrive/Colab Notebooks/utils/clip') # 此为你的自定义模块的存储路径\n","\n","import numpy as np\n","import pandas as pd\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","from torch.utils.data.sampler import Sampler\n","import clip\n","from PIL import Image\n","from pathlib import Path\n","from tqdm.auto import tqdm\n","import re\n","from simple_tokenizer import SimpleTokenizer\n","import faiss\n","import matplotlib.pyplot as plt\n","import albumentations\n","\n","%matplotlib inline\n","\n","device = torch.device('cuda')\n","image_size = 512"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"pUAc1CKqVgaR","executionInfo":{"status":"ok","timestamp":1649338829721,"user_tz":-480,"elapsed":523,"user":{"displayName":"张震元","userId":"03679820376656707274"}}},"outputs":[],"source":["transforms_train = albumentations.Compose([\n","    albumentations.Resize(image_size, image_size),\n","    albumentations.HorizontalFlip(p=0.5),\n","    albumentations.RandomBrightnessContrast(p=0.5, brightness_limit=(-0.2, 0.2), contrast_limit=(-0.2, 0.2)),\n","    albumentations.HueSaturationValue(p=0.5, hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2),\n","    albumentations.ShiftScaleRotate(p=0.5, shift_limit=0.0625, scale_limit=0.2, rotate_limit=20),\n","    albumentations.Normalize()\n","])\n","\n","transforms_valid = albumentations.Compose([\n","    albumentations.Resize(image_size, image_size),\n","    albumentations.Normalize()\n","])"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"JgrGwQqSwqq_","executionInfo":{"status":"ok","timestamp":1649338830897,"user_tz":-480,"elapsed":2,"user":{"displayName":"张震元","userId":"03679820376656707274"}}},"outputs":[],"source":["class RollingMean():\n","    def __init__(self):\n","        self.n = 0\n","        self.mean = 0\n","        \n","    def update(self, value):\n","        self.mean = (self.mean * self.n + value) / (self.n+1)\n","        self.n += 1\n","        \n","    def result(self):\n","        return self.mean"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"nXqdxIhBZpdA","executionInfo":{"status":"ok","timestamp":1649338832025,"user_tz":-480,"elapsed":2,"user":{"displayName":"张震元","userId":"03679820376656707274"}}},"outputs":[],"source":["_tokenizer = SimpleTokenizer()\n","\n","# Copied from https://github.com/openai/CLIP/blob/beba48f35392a73c6c47ae67ddffced81ad1916d/clip/clip.py#L164\n","# but with relaxed exception\n","def tokenize(texts, context_length: int = 77) -> torch.LongTensor:\n","    if isinstance(texts, str):\n","        texts = [texts]\n","\n","    sot_token = _tokenizer.encoder[\"<|startoftext|>\"]\n","    eot_token = _tokenizer.encoder[\"<|endoftext|>\"]\n","    all_tokens = [[sot_token] + _tokenizer.encode(text) + [eot_token] for text in texts]\n","    result = torch.zeros(len(all_tokens), context_length, dtype=torch.long)\n","\n","    for i, tokens in enumerate(all_tokens):\n","        n = min(len(tokens), context_length)\n","        result[i, :n] = torch.tensor(tokens)[:n]\n","        if len(tokens) > context_length:\n","            result[i, -1] = tokens[-1]\n","\n","    return result\n","# Remove EMOJI\n","RE_EMOJI = re.compile(r\"\\\\x[A-Za-z0-9./]+\", flags=re.UNICODE)\n","\n","def strip_emoji(text):\n","    return RE_EMOJI.sub(r'', text)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JDmY3Ig88aWG"},"outputs":[],"source":["# class SameGroupSampler(Sampler):\n","#     def __init__(self, df ,ds):\n","#         super().__init__(ds)\n","        \n","#         # Create a dictionary of posting_id -> index in dataset\n","#         self.index_to_position = dict(zip(df.index, range(len(df))))\n","        \n","#         # Create a Series of label_group -> set(posting_id)\n","#         self.label_group = df.reset_index().groupby('label_group')['posting_id'].apply(set).map(sorted).map(np.array)\n","\n","#     def __len__(self):\n","#         return len(self.label_group)\n","        \n","#     def __iter__(self):\n","#         for _ in range(len(self)):\n","#             # Sample one label_group\n","#             label_group_sample = self.label_group.sample(1).iloc[0]\n","            \n","#             # Sample two posting_id's\n","#             # sample1, sample2 = np.random.choice(label_group_sample, 2, replace=False)\n","#             sample1, sample2 = np.random.choice(label_group_sample, 2, replace=True)\n","            \n","#             yield self.index_to_position[sample1]\n","#             yield self.index_to_position[sample2]      "]},{"cell_type":"code","execution_count":9,"metadata":{"id":"1AyfDSbPZz34","executionInfo":{"status":"ok","timestamp":1649338834933,"user_tz":-480,"elapsed":362,"user":{"displayName":"张震元","userId":"03679820376656707274"}}},"outputs":[],"source":["class MyDataset(Dataset):\n","    def __init__(self, df, images_path):\n","        super().__init__()\n","        self.df = df\n","        self.images_path = images_path\n","        self.has_target = ('label_group' in df)\n","        \n","    def __len__(self):\n","        return len(self.df)\n","    \n","    def __getitem__(self, idx):\n","        row = self.df.iloc[idx]\n","        \n","        image = preprocess(Image.open(self.images_path / row['image']))\n","        text = tokenize([strip_emoji(row['title'])])[0]\n","        \n","        if self.has_target:\n","            return image, text, row['label_group'] #row['label_group']就是后面的target\n","        else:\n","            return image, text, 0"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"Ot965tFVaBur","executionInfo":{"status":"ok","timestamp":1649338837297,"user_tz":-480,"elapsed":457,"user":{"displayName":"张震元","userId":"03679820376656707274"}}},"outputs":[],"source":["# Load train data\n","train_images_path = Path('/content/drive/MyDrive/shopee-product-matching/train_images')\n","\n","df_train = pd.read_csv('/content/drive/MyDrive/shopee-product-matching/train1.csv', index_col='posting_id')\n","\n","dstrain = MyDataset(df_train, train_images_path)\n","dltrain = DataLoader(dstrain, batch_size=4, num_workers=2)"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z0oz7zvtaJ9z","executionInfo":{"status":"ok","timestamp":1649339152452,"user_tz":-480,"elapsed":2954,"user":{"displayName":"张震元","userId":"03679820376656707274"}},"outputId":"3ca47e3c-9659-4772-c310-52cdf4d16134"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["512"]},"metadata":{},"execution_count":16}],"source":["BATCH_SIZE = 4\n","# train_dataloader = DataLoader(dstrain, batch_size = BATCH_SIZE) #Define your own dataloader\n","\n","\n","#https://github.com/openai/CLIP/issues/57\n","def convert_models_to_fp32(model): \n","    for p in model.parameters(): \n","        p.data = p.data.float() \n","        p.grad.data = p.grad.data.float() \n","\n","device = \"cuda:0\" if torch.cuda.is_available() else \"cpu\" # If using GPU then use mixed precision training.\n","model, preprocess = clip.load(\"/content/drive/MyDrive/Colab Notebooks/utils/clip/ViT-B-32.pt\", device=device, jit=False)\n","\n","# Get embedding size\n","embed_dim = model.text_projection.shape[1]\n","embed_dim"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":415,"referenced_widgets":["e76b3977d6b54b9bb12d4fc5c1854787","22c2af9533ae41b1a26e1f6fa01bdd83","bf31b592959646cb8e100ec1a6868602","9ae7c3e3d061412b9f85d497a72de17b","9c25339cd7474679a2a0c604a396df61","493f088959774529b5706e648b9110a0","df4e3d4fd6704a1891f5e716b4ca9051","43b1bff3d3ee443eab5336a0054f8466","a10e04c756e04b0f8ec8c94869700818","27ed6582b9a64231ba4a9a71aa77db67","c44404def9d1478e9493baf3afee5008"]},"id":"2zTlc-fzSNSG","executionInfo":{"status":"error","timestamp":1649339513424,"user_tz":-480,"elapsed":725,"user":{"displayName":"张震元","userId":"03679820376656707274"}},"outputId":"5019349c-db03-42d2-f47f-c5ce633ac6f9"},"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/49 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e76b3977d6b54b9bb12d4fc5c1854787"}},"metadata":{}},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-6be4424380c6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m             \u001b[0mtotal_loss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m             \u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m             \u001b[0mscheduler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    305\u001b[0m                 \u001b[0mcreate_graph\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m                 inputs=inputs)\n\u001b[0;32m--> 307\u001b[0;31m         \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    309\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mregister_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0mgrad_tensors_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_tensor_or_tensors_to_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad_tensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m     \u001b[0mgrad_tensors_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_make_grads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_tensors_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mretain_graph\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m         \u001b[0mretain_graph\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36m_make_grads\u001b[0;34m(outputs, grads)\u001b[0m\n\u001b[1;32m     49\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequires_grad\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"grad can be implicitly created only for scalar outputs\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m                 \u001b[0mnew_grads\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmemory_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreserve_format\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: grad can be implicitly created only for scalar outputs"]}],"source":["EPOCH = 1\n","\n","\n","loss_img = nn.CrossEntropyLoss()\n","loss_txt = nn.CrossEntropyLoss()\n","optim = torch.optim.SGD(model.parameters(), lr=1e-2, momentum=0.2)\n","scheduler = torch.optim.lr_scheduler.OneCycleLR(optim, 1e-2, total_steps=EPOCH * (2*len(dltrain)-1),base_momentum=0.0, max_momentum=0.5, pct_start=0.1, div_factor=1e2, final_div_factor=1e4)\n","# optimizer = torch.optim.Adam(model.parameters(), lr=5e-5,betas=(0.9,0.98),eps=1e-6,weight_decay=0.2) #Params used from paper, the lr is smaller, more safe for fine tuning to new dataset\n","\n","for epoch in range(EPOCH):\n","    with tqdm(total=2*len(dltrain)-1) as bar:\n","        loss_mean = RollingMean()\n","        for images, texts, targets in dltrain :\n","        # for images, texts in dltrain :\n","            optim.zero_grad()\n","    \n","            # logits_per_image, logits_per_text = model(images.to(device), texts.to(device))\n","\n","            # ground_truth = torch.arange(BATCH_SIZE,dtype=torch.long,device=device)  #对比训练的ground_truth，貌似是那条对角线？  \n","            #                                       #这里能不能把ground_truth直接改成label_group？\n","\n","            # total_loss = (loss_img(logits_per_image,ground_truth) + loss_txt(logits_per_text,ground_truth))/2\n","            images_features = model.encode_image(images.to(device))\n","            texts_features = model.encode_text(texts.to(device))\n","\n","            # L2-normalize features\n","            images_features = images_features / images_features.norm(2, dim=1, keepdim=True)\n","            texts_features = texts_features / texts_features.norm(2, dim=1, keepdim=True)\n","            # features = (images_features + texts_features) / 2\n","\n","            # features = (0.4 * images_features + 0.6 * texts_features)\n","\n","            # # images_features = images_features * 0.4\n","            # # texts_features = texts_features * 0.6\n","            # # features = matrix_add(images_features.cpu().detach(), texts_features.cpu().detach())\n","            # # features = np.array(features)\n","\n","\n","            targets = targets.to(device)\n","            similarity = torch.cosine_similarity(images_features, texts_features, dim=0)\n","            total_loss = 1 - similarity\n","            \n","\n","            total_loss.backward()\n","            optim.step()\n","            scheduler.step()\n","            \n","            loss_mean.update(total_loss.item())\n","            bar.update()\n","            bar.set_description('{:.4f}'.format(loss_mean.result()))\n","    torch.save({\n","        'epoch': epoch,\n","        'model_state_dict': model.state_dict(),\n","        'optimizer_state_dict': optim.state_dict(),\n","        'loss': total_loss,\n","        }, f\"/content/drive/MyDrive/shopee-product-matching/model_3.pt\") #just change to your preferred folder/filename"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3EgaDWG7UV6p"},"outputs":[],"source":["# model, preprocess = clip.load(\"ViT-B/32\",device=device,jit=False) #Must set jit=False for training\n","# checkpoint = torch.load(\"/content/drive/MyDrive/shopee-product-matching/model_3.pt\")\n","\n","# # # Use these 3 lines if you use default model setting(not training setting) of the clip. For example, if you set context_length to 100 since your string is very long during training, then assign 100 to checkpoint['model_state_dict'][\"context_length\"] \n","# # checkpoint['model_state_dict'][\"input_resolution\"] = model.input_resolution #default is 224\n","# # checkpoint['model_state_dict'][\"context_length\"] = model.context_length # default is 77\n","# # checkpoint['model_state_dict'][\"vocab_size\"] = model.vocab_size \n","\n","# model.load_state_dict(checkpoint['model_state_dict'])"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"Mzn68YB2FbID","executionInfo":{"status":"ok","timestamp":1649339084793,"user_tz":-480,"elapsed":379,"user":{"displayName":"张震元","userId":"03679820376656707274"}}},"outputs":[],"source":["# 这段是用前面finetune的权重生成image和text的feature，之后拼接，2*512，然后保存，等待和test集中的对比\n","def find_similarities_and_indexes(df, images_path, top_n=4, features_file=None):\n","    # Create pytorch Dataset/DataLoader\n","    ds = MyDataset(df, images_path)\n","    dl = DataLoader(ds, batch_size=4, shuffle=False, num_workers=2)\n","\n","    # Allocate memory for features\n","    features = np.empty((len(df), 2*embed_dim), dtype=np.float32)\n","\n","    # Begin predict\n","    i = 0\n","    for images, texts, _ in tqdm(dl):\n","        n = len(images)\n","        with torch.no_grad():\n","            # Generate image and text features\n","            images_features = model.encode_image(images.to(device))\n","            texts_features = model.encode_text(texts.to(device))\n","\n","        # Concat features (first images then texts)\n","        features[i:i+n, :embed_dim] = images_features.cpu()\n","        features[i:i+n, embed_dim:] = texts_features.cpu()\n","\n","        i += n\n","\n","    # Option to save these features (may be usefull to tune cut value)\n","    if features_file is not None:\n","        np.save(features_file, features)\n","\n","    # l2-normalize\n","    features /= np.linalg.norm(features, 2, axis=1, keepdims=True)\n","\n","# faiss是为稠密向量提供高效相似度搜索和聚类的框架: https://blog.csdn.net/kanbuqinghuanyizhang/article/details/80774609\n","    # Create index\n","    index = faiss.IndexFlatIP(2*embed_dim)     # d=2*emb \n","    index.add(features)\n","\n","    # Search index\n","    return index.search(features, top_n)\n","\n","    # index.search返回两个参数，1.similarity,表示与相似向量的距离(distance)，2.indexes表示相似用户的ID。\n","\n","\n","\n","    # TODO: try range_search\n","    # lims, similarities, indexes = index_test.range_search(test_features, GROUP_CUT)"]},{"cell_type":"code","source":["# 未finetune版\n","RUN_ON_TRAIN = 1\n","if RUN_ON_TRAIN:\n","    # Perform search of similiar items\n","    similarities, indexes = find_similarities_and_indexes(df_train, train_images_path, features_file='features-no-norm.npy')\n","    \n","    # `similarities` will have shape (n, top_n) and will have the similarites scores for closest matches\n","    # `indexes` will have shape (n, top_n) and have the index closest matches.\n","    # Both arrays are aligned\n","\n","    # Convert index to groups, will have shape (n, top_n)\n","    found_groups = df_train['label_group'].values[indexes]\n","\n","    # Check if matches are from same group. Will create a boolean vector of (n, top_n)\n","    is_same_group = (found_groups == df_train['label_group'].values[:, np.newaxis])\n","\n","    # Plot similarities score from same group and different groups\n","    plt.figure(figsize=(10, 5))\n","    plt.hist([similarities[is_same_group], similarities[~is_same_group]], density=False, bins=51,\n","         label=['Same group', 'Different group'], histtype='stepfilled', alpha=0.75)\n","    plt.xlim(0, 1)\n","    plt.xlabel('Similarity score')\n","    plt.legend();"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455,"referenced_widgets":["75cab710b2904fb9949340fdd399a4f2","6be935c2112d4df7aae592e785c2e9e1","583fe121292d4e7a87a883e1aabb5d6c","0a8681327c934b4aa6b60dd680be0f7c","76ea57858dda4a8fa2c6bad804e43a80","b500fc8df6db476393fc3a68a6be063f","dd441baa7f4a4fca94d7629642016436","d09b49d7bff84c479b17e26f0b0ada37","5af792e176054acdab7ba4c00df141ac","cc3f5846228a46db82cca389ea23527f","185dba3095e140cf8d2dd85556c78536"]},"id":"BB-0EfTkI85B","executionInfo":{"status":"ok","timestamp":1649336949653,"user_tz":-480,"elapsed":4840,"user":{"displayName":"张震元","userId":"03679820376656707274"}},"outputId":"2f1ff20e-76f0-421d-98b4-5c5cd3833c7e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/4 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"75cab710b2904fb9949340fdd399a4f2"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# 图文结合\n","RUN_ON_TRAIN = 1\n","if RUN_ON_TRAIN:\n","    # Perform search of similiar items\n","    similarities, indexes = find_similarities_and_indexes(df_train, train_images_path, features_file='features-no-norm.npy')\n","    \n","    # `similarities` will have shape (n, top_n) and will have the similarites scores for closest matches\n","    # `indexes` will have shape (n, top_n) and have the index closest matches.\n","    # Both arrays are aligned\n","\n","    # Convert index to groups, will have shape (n, top_n)\n","    found_groups = df_train['label_group'].values[indexes]\n","\n","    # Check if matches are from same group. Will create a boolean vector of (n, top_n)\n","    is_same_group = (found_groups == df_train['label_group'].values[:, np.newaxis])\n","\n","    # Plot similarities score from same group and different groups\n","    plt.figure(figsize=(10, 5))\n","    plt.hist([similarities[is_same_group], similarities[~is_same_group]], density=False, bins=51,\n","         label=['Same group', 'Different group'], histtype='stepfilled', alpha=0.75)\n","    plt.xlim(0, 1)\n","    plt.xlabel('Similarity score')\n","    plt.legend();"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455,"referenced_widgets":["46ec79365da149379f743a71e2b6c96f","6ab0354c416a473f8d2e4d0d723f2674","addca84702994749946c3d162ce541b8","1d46dce8f1194334a03fcab4f20c4e0d","200ed266cac64d00ad40c1f824e40b9e","622beb47e7454390a1c0ef14b07d7079","71520ecd5d6043cb82f48d2ce91a8d7f","d76015f9118449018fbdcbebde5e03eb","996fe81add6748539d571321b68414f0","d320e6ea2cf64f4f873325bd6b83084b","d55067aacb4649e1b20685518d92a1b6"]},"id":"BZ4cxLuiHVg3","executionInfo":{"status":"ok","timestamp":1649336782039,"user_tz":-480,"elapsed":45256,"user":{"displayName":"张震元","userId":"03679820376656707274"}},"outputId":"844ecd54-5716-4fba-d52b-02f5d57f7755"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/4 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"46ec79365da149379f743a71e2b6c96f"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"btlrOLfZGFc8","colab":{"base_uri":"https://localhost:8080/","height":455,"referenced_widgets":["050fe88b0d9c45f98a3cf9c45d131e0d","5b596efbb2bf476faba80807b8261ec5","609b95d331b7426b86043e1fece287fb","9c3a71b33aaf4c2f84186ef12c5324ca","88011a13b74a4bbf81debedb338e8d23","3715601f0008416bbbf50610cebf359b","79ea30a68678454a90c56f2814f7ad7c","53dee48caf804c3fb991a0e9e1682541","a66be884fd4e4d1eb8babfc565b7b17f","45231ea8e3ad44928d78436daa96708c","abd25df76bd4448cb4332dc03acd2415"]},"executionInfo":{"status":"ok","timestamp":1649336466029,"user_tz":-480,"elapsed":15166,"user":{"displayName":"张震元","userId":"03679820376656707274"}},"outputId":"b440727d-cadd-42c1-8415-135d1115f389"},"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/4 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"050fe88b0d9c45f98a3cf9c45d131e0d"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAl4AAAE9CAYAAADaqWzvAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAeU0lEQVR4nO3dfbhXZZ3v8ffXvVVMNFLQ0TDAIyKCuM2NWmYxYmTpAZuc8RHRHB7yaUZnmskzzch0mqmONp00nZHUoIkUw64Th2rGMtH0kLJRBlFycHCrGA2I+cAkJfI9f+wfO8AN++G3970feL+uq4vfWutea33Zd+CH+16/dUdmIkmSpK63R3cXIEmStLsweEmSJBVi8JIkSSrE4CVJklSIwUuSJKkQg5ckSVIhtd1dAMDAgQNz6NCh3V2GJElSq5YuXfpSZg7qyLk9IngNHTqUhoaG7i5DkiSpVRHxXEfPdapRkiSpEIOXJElSIQYvSZKkQnrEM14tefPNN1mzZg2bNm3q7lLUTv369WPw4MHsueee3V2KJEk9So8NXmvWrGG//fZj6NChRER3l6M2ykw2bNjAmjVrGDZsWHeXI0lSj9Jjpxo3bdrEgQceaOjqZSKCAw880JFKSZJa0GODF2Do6qXsN0mSWtajg1d3q6mpoa6ujlGjRnHsscfy5S9/mS1btgDQ0NDAVVddBcBvfvMbTjvtNOrq6pg3bx4//elPGTVqFHV1dbzxxhtdVt/s2bP5xS9+0WXXlyRJnavHPuP1NrPP7NzrXbyw1Sb77LMPy5YtA2DdunWcf/75vPbaa/zt3/4t9fX11NfXA/D4448DNLedMWMG1157LRdeeGGbSslMMpM99mhfDp49ezajR4/m0EMPbdd5W23evJna2t7zfwFJkno7R7za6KCDDmLWrFl87WtfIzNZtGgRZ555JuvWrePCCy9kyZIl1NXVceutt3L33Xfz13/911xwwQUAXH/99YwdO5YxY8Zw3XXXAdDY2MiIESO46KKLGD16NC+88MJO240cOZKpU6cyatQoJkyYwBtvvMH8+fNpaGjgggsuaHFkbcmSJYwZM4a6ujo+/elPM3r0aKAprE2cOJFTTz2V8ePH8/LLL3PWWWcxZswYTjrpJJYvXw7AzJkzueGGG5qvN3r0aBobG2lsbOSoo47iggsuYOTIkZx99tn8+te/7vKfvyRJfYHBqx0OP/xw3nrrLdatW9e876CDDuK2227jlFNOYdmyZUyfPp2JEydy/fXXM3fuXO69915WrVrFo48+yrJly1i6dCkPPvggAKtWreKyyy7jySef5Omnn95lu8svv5wnn3ySAQMGcM8993D22WdTX1/P3LlzWbZsGfvss892tV5yySXceuutLFu2jJqamu2OPfbYY8yfP58HHniA6667juOOO47ly5fz93//91x00UWt/hyefvppLrvsMlauXMn+++/PLbfcUu2PVpKk3YLzTF3s3nvv5d577+W4444DYOPGjaxatYr3vOc9DBkyhJNOOqnVdsOGDaOurg6A448/nsbGxl3e85VXXuH111/nfe97HwDnn38+Cxf+bmr1wx/+MAcccAAADz30EPfccw8Ap556Khs2bOC1117b5fUPO+wwTj75ZAAuvPBCbrzxRv78z/+8PT8WSZJ6vHNnLe70axq82mH16tXU1NRw0EEHsXLlyjadk5lce+21TJ8+fbv9jY2N7Lvvvm1qt/feezdv19TUVP3A/rb33Zna2trmLxIA270eYsdvLfotRkmS2sapxjZav349M2bM4IorrmhX0PjIRz7CHXfcwcaNGwF48cUXt5uqbG+7be233368/vrrb9s/YMAA9ttvPx555BEA7rrrrp1e45RTTmHu3LkALFq0iIEDB7L//vszdOhQHnvsMaBpavLZZ59tPuf5559n8eKmfwV8+9vf5gMf+MAu65QkSU0c8dqFN954g7q6Ot58801qa2uZPHky11xzTbuuMWHCBFauXNk87de/f3++9a1vve25q7a229bFF1/MjBkz2GeffVi8ePF2z3ndfvvtTJ06lT322IMPfehDvPOd72zxGjNnzuSTn/wkY8aM4R3veAdz5swB4BOf+ATf/OY3GTVqFCeeeCJHHnlk8zkjRozg5ptv5pOf/CRHH300n/rUp9r1M5EkaXcVmdndNVBfX58NDQ3b7Vu5ciUjR47spop6v40bN9K/f38AvvjFL7J27Vq++tWvVn3dxsZGzjzzTFasWLHLdvafJKm329kzXvOmv39pZtZ35JqOePVR3//+9/nCF77A5s2bGTJkCLNnz+7ukiRJ2u0ZvPqoc845h3POOafTrzt06NBWR7skSVLLfLhekiSpEIOXJElSIQYvSZKk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\n"},"metadata":{"needs_background":"light"}}],"source":["# 只使用图片\n","RUN_ON_TRAIN = 1\n","if RUN_ON_TRAIN:\n","    # Perform search of similiar items\n","    similarities, indexes = find_similarities_and_indexes(df_train, train_images_path, features_file='features-no-norm.npy')\n","    \n","    # `similarities` will have shape (n, top_n) and will have the similarites scores for closest matches\n","    # `indexes` will have shape (n, top_n) and have the index closest matches.\n","    # Both arrays are aligned\n","\n","    # Convert index to groups, will have shape (n, top_n)\n","    found_groups = df_train['label_group'].values[indexes]\n","\n","    # Check if matches are from same group. Will create a boolean vector of (n, top_n)\n","    is_same_group = (found_groups == df_train['label_group'].values[:, np.newaxis])\n","\n","    # Plot similarities score from same group and different groups\n","    plt.figure(figsize=(10, 5))\n","    plt.hist([similarities[is_same_group], similarities[~is_same_group]], density=False, bins=51,\n","         label=['Same group', 'Different group'], histtype='stepfilled', alpha=0.75)\n","    plt.xlim(0, 1)\n","    plt.xlabel('Similarity score')\n","    plt.legend();"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"cosine_similarity","provenance":[],"authorship_tag":"ABX9TyMjdHuuuinST/oyVYRKyoLU"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"75cab710b2904fb9949340fdd399a4f2":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6be935c2112d4df7aae592e785c2e9e1","IPY_MODEL_583fe121292d4e7a87a883e1aabb5d6c","IPY_MODEL_0a8681327c934b4aa6b60dd680be0f7c"],"layout":"IPY_MODEL_76ea57858dda4a8fa2c6bad804e43a80"}},"6be935c2112d4df7aae592e785c2e9e1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b500fc8df6db476393fc3a68a6be063f","placeholder":"​","style":"IPY_MODEL_dd441baa7f4a4fca94d7629642016436","value":"100%"}},"583fe121292d4e7a87a883e1aabb5d6c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d09b49d7bff84c479b17e26f0b0ada37","max":4,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5af792e176054acdab7ba4c00df141ac","value":4}},"0a8681327c934b4aa6b60dd680be0f7c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cc3f5846228a46db82cca389ea23527f","placeholder":"​","style":"IPY_MODEL_185dba3095e140cf8d2dd85556c78536","value":" 4/4 [00:04&lt;00:00,  1.08s/it]"}},"76ea57858dda4a8fa2c6bad804e43a80":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b500fc8df6db476393fc3a68a6be063f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"dd441baa7f4a4fca94d7629642016436":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d09b49d7bff84c479b17e26f0b0ada37":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5af792e176054acdab7ba4c00df141ac":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"cc3f5846228a46db82cca389ea23527f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"185dba3095e140cf8d2dd85556c78536":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"46ec79365da149379f743a71e2b6c96f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6ab0354c416a473f8d2e4d0d723f2674","IPY_MODEL_addca84702994749946c3d162ce541b8","IPY_MODEL_1d46dce8f1194334a03fcab4f20c4e0d"],"layout":"IPY_MODEL_200ed266cac64d00ad40c1f824e40b9e"}},"6ab0354c416a473f8d2e4d0d723f2674":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_622beb47e7454390a1c0ef14b07d7079","placeholder":"​","style":"IPY_MODEL_71520ecd5d6043cb82f48d2ce91a8d7f","value":"100%"}},"addca84702994749946c3d162ce541b8":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d76015f9118449018fbdcbebde5e03eb","max":4,"min":0,"orientation":"horizontal","style":"IPY_MODEL_996fe81add6748539d571321b68414f0","value":4}},"1d46dce8f1194334a03fcab4f20c4e0d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d320e6ea2cf64f4f873325bd6b83084b","placeholder":"​","style":"IPY_MODEL_d55067aacb4649e1b20685518d92a1b6","value":" 4/4 [00:04&lt;00:00,  1.36s/it]"}},"200ed266cac64d00ad40c1f824e40b9e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"622beb47e7454390a1c0ef14b07d7079":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"71520ecd5d6043cb82f48d2ce91a8d7f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d76015f9118449018fbdcbebde5e03eb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"996fe81add6748539d571321b68414f0":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d320e6ea2cf64f4f873325bd6b83084b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d55067aacb4649e1b20685518d92a1b6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"050fe88b0d9c45f98a3cf9c45d131e0d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5b596efbb2bf476faba80807b8261ec5","IPY_MODEL_609b95d331b7426b86043e1fece287fb","IPY_MODEL_9c3a71b33aaf4c2f84186ef12c5324ca"],"layout":"IPY_MODEL_88011a13b74a4bbf81debedb338e8d23"}},"5b596efbb2bf476faba80807b8261ec5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3715601f0008416bbbf50610cebf359b","placeholder":"​","style":"IPY_MODEL_79ea30a68678454a90c56f2814f7ad7c","value":"100%"}},"609b95d331b7426b86043e1fece287fb":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_53dee48caf804c3fb991a0e9e1682541","max":4,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a66be884fd4e4d1eb8babfc565b7b17f","value":4}},"9c3a71b33aaf4c2f84186ef12c5324ca":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_45231ea8e3ad44928d78436daa96708c","placeholder":"​","style":"IPY_MODEL_abd25df76bd4448cb4332dc03acd2415","value":" 4/4 [00:03&lt;00:00,  1.03it/s]"}},"88011a13b74a4bbf81debedb338e8d23":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3715601f0008416bbbf50610cebf359b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"79ea30a68678454a90c56f2814f7ad7c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"53dee48caf804c3fb991a0e9e1682541":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a66be884fd4e4d1eb8babfc565b7b17f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"45231ea8e3ad44928d78436daa96708c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"abd25df76bd4448cb4332dc03acd2415":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e76b3977d6b54b9bb12d4fc5c1854787":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_22c2af9533ae41b1a26e1f6fa01bdd83","IPY_MODEL_bf31b592959646cb8e100ec1a6868602","IPY_MODEL_9ae7c3e3d061412b9f85d497a72de17b"],"layout":"IPY_MODEL_9c25339cd7474679a2a0c604a396df61"}},"22c2af9533ae41b1a26e1f6fa01bdd83":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_493f088959774529b5706e648b9110a0","placeholder":"​","style":"IPY_MODEL_df4e3d4fd6704a1891f5e716b4ca9051","value":"  0%"}},"bf31b592959646cb8e100ec1a6868602":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"danger","description":"","description_tooltip":null,"layout":"IPY_MODEL_43b1bff3d3ee443eab5336a0054f8466","max":49,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a10e04c756e04b0f8ec8c94869700818","value":0}},"9ae7c3e3d061412b9f85d497a72de17b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_27ed6582b9a64231ba4a9a71aa77db67","placeholder":"​","style":"IPY_MODEL_c44404def9d1478e9493baf3afee5008","value":" 0/49 [00:00&lt;?, ?it/s]"}},"9c25339cd7474679a2a0c604a396df61":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"493f088959774529b5706e648b9110a0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"df4e3d4fd6704a1891f5e716b4ca9051":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"43b1bff3d3ee443eab5336a0054f8466":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a10e04c756e04b0f8ec8c94869700818":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"27ed6582b9a64231ba4a9a71aa77db67":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c44404def9d1478e9493baf3afee5008":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}